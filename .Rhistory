}
output_list <- list(df_train, df_test, df_tree_fit_loop, b, j)
names(output_list) <- c("train.set", "test.set", "tree.fit",
"tree.eval", "index")
return(output_list)
}
d <- worst_Tree_crabs(end_seed = 60000, lowest.val = 0.79)
n.trials <- 60000 - 50000 + 1
one_percent <- n.trials/100
if ((i - 50000 + 1)%%one_percent == 0) {
print(paste((i/60000) * 100, "% complete", sep = ""))
}
for (i in 50000:60000) {
print(i)
if ((i - 50000 + 1)%%one_percent == 0) {
print(paste((i/60000) * 100, "% complete", sep = ""))
}
}
for (i in 50000:60000) {
if ((i - 50000 + 1)%%one_percent == 0) {
print(paste((i/60000) * 100, "% complete", sep = ""))
}
}
one_percent
one_percent <- (n.trials-1)/100
for (i in 50000:60000) {
if ((i - 50000 + 1)%%one_percent == 0) {
print(paste((i/60000) * 100, "% complete", sep = ""))
}
}
for (i in 50000:60000) {
if (((i - 50000 + 1)*1000)%%(one_percent*1000) == 0) {
print(paste((i/60000) * 100, "% complete", sep = ""))
}
}
}
for (i in 50000:60000) {
if (((i - 50000 + 1)*1000)%%(one_percent*1000) == 0) {
print(paste((i/(60000-50000) * 100, "% complete", sep = "")))
for (i in 50000:60000) {
if (((i - 50000 + 1)*1000)%%(one_percent*1000) == 0) {
print(paste(((i/(60000-50000) * 100), "% complete", sep = "")))
for (i in 50000:60000) {
if (((i - 50000 + 1)*1000)%%(one_percent*1000) == 0) {
print(paste(i*100 / (60000-50000), "%"))
}
}
for (i in 50000:60000) {
if (((i - 50000 + 1)*1000)%%(one_percent*1000) == 0) {
print(paste((i-50000)*100 / (60000-50000), "%"))
}
}
start_seed <- 50000
end_seed <- 60000
for (i in start_seed:end_seed) {
if (((i - start_seed + 1)*1000)%%(one_percent*1000) == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
for (i in start_seed:end_seed) {
if (((i - start_seed + 1)*100)%%(one_percent*100) == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
for (i in start_seed:end_seed) {
if (((i - start_seed + 1))%%(one_percent) == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
for (i in start_seed:end_seed) {
if ((i - start_seed + 1)%%(one_percent) == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
start_seed <- 50000
end_seed <- 60000
n.trials <- end_seed - start_seed + 1
one_percent <- (n.trials-1)/100
for (i in start_seed:end_seed) {
if ((i - start_seed + 1)%%one_percent == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
one_percent <- (n.trials)/100
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
one_percent <- (n.trials-1)/100
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
worst_Tree_crabs <- function(end_seed, start_seed = 1, lowest.val = 0.95) {
j <- 1
value <- lowest.val
n.trials <- end_seed - start_seed + 1
one_percent <- (n.trials-1)/100
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
set.seed(i)
a <- split_df(crabs)
df_train <- a$training.set
df_test <- a$testing.set
df_tree_fit_loop <- class_tree_spec %>%
fit(sp ~ ., data = df_train)
b <- get_evals(df_tree_fit_loop, df_test)
if (b$overall[1] < value-0.005) {
print(paste("Found new shittest tree at seed", i))
j <- i
value <- b$overall[1]
}
}
output_list <- list(df_train, df_test, df_tree_fit_loop, b, j)
names(output_list) <- c("train.set", "test.set", "tree.fit",
"tree.eval", "index")
return(output_list)
}
c <- worst_Tree_crabs(end_seed = 60000, start_seed = 50000)
d <- worst_Tree_crabs(end_seed = 70000)
start_seed <- 1
end_seed <- 70000
n.trials <- end_seed - start_seed + 1
one_percent <- (n.trials-1)/100
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
}
}
}
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
d <- worst_Tree_crabs(end_seed = 7000)
start_seed <- 1
end_seed <- 7000
n.trials <- end_seed - start_seed + 1
one_percent <- (n.trials-1)/100
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
one_percent <- (n.trials)/100
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
}
worst_Tree_crabs <- function(end_seed, start_seed = 1, lowest.val = 0.95) {
j <- 1
value <- lowest.val
n.trials <- end_seed - start_seed + 1
one_percent <- (n.trials)/100
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste((i-start_seed)*100 / (end_seed-start_seed), "%"))
}
set.seed(i)
a <- split_df(crabs)
df_train <- a$training.set
df_test <- a$testing.set
df_tree_fit_loop <- class_tree_spec %>%
fit(sp ~ ., data = df_train)
b <- get_evals(df_tree_fit_loop, df_test)
if (b$overall[1] < value-0.005) {
print(paste("Found new shittest tree at seed", i))
j <- i
value <- b$overall[1]
}
}
output_list <- list(df_train, df_test, df_tree_fit_loop, b, j)
names(output_list) <- c("train.set", "test.set", "tree.fit",
"tree.eval", "index")
return(output_list)
}
d <- worst_Tree_crabs(end_seed = 7000)
d <- worst_Tree_crabs(end_seed = 7000)
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste(round((i-start_seed)*100 / (end_seed-start_seed), 1), "%"))
}
}
worst_Tree_crabs <- function(end_seed, start_seed = 1, lowest.val = 0.95) {
j <- 1
value <- lowest.val
n.trials <- end_seed - start_seed + 1
one_percent <- (n.trials)/100
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste(round((i-start_seed)*100 / (end_seed-start_seed), 1),
"%", sep = ""))
}
set.seed(i)
a <- split_df(crabs)
df_train <- a$training.set
df_test <- a$testing.set
df_tree_fit_loop <- class_tree_spec %>%
fit(sp ~ ., data = df_train)
b <- get_evals(df_tree_fit_loop, df_test)
if (b$overall[1] < value-0.005) {
print(paste("Found new shittest tree at seed", i))
j <- i
value <- b$overall[1]
}
}
output_list <- list(df_train, df_test, df_tree_fit_loop, b, j)
names(output_list) <- c("train.set", "test.set", "tree.fit",
"tree.eval", "index")
return(output_list)
}
d <- worst_Tree_crabs(end_seed = 70000)
worst_Tree_crabs <- function(end_seed, start_seed = 1, lowest.val = 0.95) {
j <- 1
value <- lowest.val
n.trials <- end_seed - start_seed + 1
one_percent <- (n.trials)/100
for (i in start_seed:end_seed) {
if ((i - start_seed)%%one_percent == 0) {
print(paste(round((i-start_seed)*100 / (end_seed-start_seed), 1),
"% complete", sep = ""))
}
set.seed(i)
a <- split_df(crabs)
df_train <- a$training.set
df_test <- a$testing.set
df_tree_fit_loop <- class_tree_spec %>%
fit(sp ~ ., data = df_train)
b <- get_evals(df_tree_fit_loop, df_test)
if (b$overall[1] < value-0.005) {
print(paste("Found new shittest tree at seed", i))
j <- i
value <- b$overall[1]
}
}
output_list <- list(df_train, df_test, df_tree_fit_loop, b, j)
names(output_list) <- c("train.set", "test.set", "tree.fit",
"tree.eval", "index")
return(output_list)
}
d <- worst_Tree_crabs(end_seed = 70000)
View(d)
d[[3]]
d[3]
worst_tree_fit <- d[[3]]
worst_tree_eval <- d[[4]]
#plot worst tree
worst_tree_fit %>%
extract_fit_engine() %>%
rpart.plot::rpart.plot(roundint = FALSE,
extra = 1,
box.palette = c("lightblue2", "orange"),
lwd = 2)
worst_tree_eval
d[[5]]
setwd("~/Desktop/Stats/3rd Year/Data Analysis/Group Project/DAS_Group_10")
plot_model(model_1,
type = "pred",
title = "",
terms="age [all]",
axis.title = c("Age", "Prob. of instructor being male"))
library(tidyverse)
library(ggplot2)
library(tidyr)
library(tidymodels)
library(sjPlot)
library(performance)
library(kableExtra)
library(gt)
library(magrittr)
library(moderndive)
library(gapminder)
library(ISLR)
library(gridExtra) #grid.arrange()
library(janitor) #tabyl, adorn_
plot_model(model_1,
type = "pred",
title = "",
terms="age [all]",
axis.title = c("Age", "Prob. of instructor being male"))
model_1 <- glm(Obese ~ Age + Education + Veg,
data = df,
family = binomial) #Sig.predictors according to model_Sat
df <- read.csv("DAProject1.csv")
model_1 <- glm(Obese ~ Age + Education + Veg,
data = df,
family = binomial) #Sig.predictors according to model_Sat
glm(Obese ~ Age + Education + Veg,
data = df,
family = binomial)
model_1 <- glm(Obese ~ Age + Education + Veg,
data = df,
family = binomial) #Sig.predictors according to model_Sat
model_1 <- glm(Obese ~ Age + Education + Veg,
data = df,
family = binomial) #Sig.predictors according to model_Sat
for (i in c(2:7)) {
df[,i] <- factor(df[,i])
}
model_1 <- glm(Obese ~ Age + Education + Veg,
data = df,
family = binomial) #Sig.predictors according to model_Sat
plot_model(model_1,
type = "pred",
title = "",
terms="age [all]",
axis.title = c("Age", "Prob. of instructor being male"))
plot_model(model_1,
type = "pred",
title = "",
terms="Age [all]",
axis.title = c("Age", "Prob. of instructor being male"))
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"))
plot_model(model_1,
type = "pred",
title = "",
terms="Veg [all]",
axis.title = c("Age", "Prob. of instructor being male"))
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"))
plot_model(model_1,
type = "pred",
title = "",
terms="Education [Degree or higher]",
axis.title = c("Age", "Prob. of instructor being male"))
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"))
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"))
pred_plot_age <- plot_model(model_1,
type = "pred",
title = "",
terms="Age [all]",
axis.title = c("Age", "Prob. of instructor being male"))
pred_plot_edu <- plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"))
pred_plot_veg <- plot_model(model_1,
type = "pred",
title = "",
terms="Veg [all]",
axis.title = c("Age", "Prob. of instructor being male"))
gridExtra::grid.arrange(pred_plot_age,
pred_plot_edu,
pred_plot_veg,
ncol = 3, nrow = 1)
plot_model(model_1,
type = "pred",
title = "",
terms="Age [all]",
axis.title = c("Age", "Prob. of instructor being male"),
las = 2)
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"),
las = 2)
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"),
las = 1)
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"),
las = 3)
pred_plot_age <- plot_model(model_1,
type = "pred",
title = "",
terms="Age [all]",
axis.title = c("Age", "Prob. of instructor being male"))
pred_plot_edu <- plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"))
pred_plot_veg <- plot_model(model_1,
type = "pred",
title = "",
terms="Veg [all]",
axis.title = c("Age", "Prob. of instructor being male"))
gridExtra::grid.arrange(pred_plot_age,
pred_plot_edu,
pred_plot_veg,
ncol = 3, nrow = 1)
?plot_model
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"),
axis.labels = 1:2)
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"),
axis.labels = 1:2)
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"),
axis.labels = 1:4)
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"),
axis.labels = c("a", "b"))
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"),
axis.labels = c("a", "b", "c", "d", "e", "f"))
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"),
grid = TRUE)
plot_model(model_1,
type = "pred",
title = "",
terms=c("Education [all]", "Age [all]")
axis.title = c("Age", "Prob. of instructor being male"),
plot_model(model_1,
type = "pred",
title = "",
terms=c("Education [all]", "Age [all]"),
axis.title = c("Age", "Prob. of instructor being male"),
grid = TRUE)
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"),
grid = TRUE)
plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"),
grid = F)
pred_plot_age <- plot_model(model_1,
type = "pred",
title = "",
terms="Age [all]",
axis.title = c("Age", "Prob. of instructor being male"))
pred_plot_edu <- plot_model(model_1,
type = "pred",
title = "",
terms="Education [all]",
axis.title = c("Age", "Prob. of instructor being male"))
pred_plot_veg <- plot_model(model_1,
type = "pred",
title = "",
terms="Veg [all]",
axis.title = c("Age", "Prob. of instructor being male"))
gridExtra::grid.arrange(pred_plot_age,
pred_plot_edu,
pred_plot_veg,
ncol = 3, nrow = 1)
model_1 %>%
tidy(conf.int = TRUE) %>%
select(-p.value)
help(gridExtra::grid.arrange)
help(gridExtra::grid.arrange())
help(grid.arrange)
