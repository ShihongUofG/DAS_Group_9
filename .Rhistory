Age * Sex,
family = binomial, data = df)
#get smallest p-val
model_Full %>%
tidy() %>%
filter(p.value == max(p.value))
#Going to try building a model w backwards elimination
model_Full <- glm(Obese ~ Age + Sex + Education + Veg +
Age * Sex,
family = binomial, data = df)
#get smallest p-val
model_Full %>%
tidy() %>%
filter(p.value == max(p.value))
model_2 <- model_Full
glance(model_2)
check_model(model_2)
check_model(model_2)
anova(model_2, test = "Chisq")
model_3 <- glm(Obese ~ Age + Education + Veg + Age*Sex,
family = binomial, data = df)
anova(model_3, test = "Chisq")
check_model(model_3)
check_model(model_3)
model_3 <- glm(Obese ~ Age + Education + Veg + Age*Sex + (Age*Sex)^2,
family = binomial, data = df)
check_model(model_3)
get_regression_points(model_2)
binned_residuals(model_2)
binned_residuals(model_3)
ggplot(df, aes(x = Age)) +
geom_histogram(bins = 30, col = "white")
ggplot(df, aes(x = Age, y = Obese, fill = Obese)) +
geom_boxplot() +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
ggplot(df, aes(x = Education, group = Obese)) +
geom_bar(aes(y = after_stat(prop),
fill = Obese),
stat = "count",
position = "dodge") +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
ggplot(df, aes(x = fct_infreq(Education),
y = Obese,
fill = Education)) +
geom_bar(stat = "identity") +
facet_wrap(~ Sex)
ggplot(df, aes(x = Sex, group = Obese)) +
geom_bar(aes(y = after_stat(prop),
fill = Obese),
stat = "count",
position = "dodge") +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
GGally::ggpairs(df)
model_4 <- glm(Obese ~ Age + Education + Veg + Age*Education,
family = binomial, data = df)
glance(model_4)
anova(model_4, test = "Chisq")
model_4 <- glm(Obese ~ Age + Education + Veg + Age*Education + Age*Sex,
family = binomial, data = df)
glance(model_4)
anova(model_4, test = "Chisq")
binned_residuals(model_4)
model_4 <- glm(Obese ~ Age + Education + Veg + Age*Education,
family = binomial, data = df)
binned_residuals(model_4)
#Fewer variables
model_5 <- glm(Obese ~ Education + Age,
family = binomial, data = df)
binned_residuals(model_5)
#Fewer variables
model_5 <- glm(Obese ~ Education + Age + Age * Education,
family = binomial, data = df)
binned_residuals(model_5)
#Fewer variables
model_5 <- glm(Obese ~ Education + Age + Age * Education + Veg,
family = binomial, data = df)
binned_residuals(model_5)
#Let's try a decision tree!!!
?trainingset
#Let's try a decision tree!!!
??trainingset
#Let's try a decision tree!!!
initial_split(df, prop = 0.5)
#Let's try a decision tree!!!
a <- initial_split(df, prop = 0.5)
training(a)
df_train <- training(a)
df_test <- testing(a)
rf_1 <- randomForest(Obese ~ ., df_train,
xtest = df_test[,-7],
ytest = df_test[,7])
rf_1 <- randomForest::randomForest(Obese ~ ., df_train,
xtest = df_test[,-7],
ytest = df_test[,7])
rf_1
glimpse(df)
class_tree_spec <- decision_tree(tree_depth = 30,
mode = "classification",
engine = "rpart")
dt_1 <- class_tree_spec %>%
fit(Obese ~ ., data = df_train)
class_tree_fit %>%
extract_fit_engine()
class_tree_fit %>%
extract_fit_engine() %>%
rpart.plot::rpart.plot(roundint = FALSE,
box.palette = c("pink", "dodgerblue"),
extra = 1,
lwd = 2)
class_tree_spec <- decision_tree(tree_depth = 30,
mode = "classification",
engine = "rpart")
dt_1 <- class_tree_spec %>%
fit(Obese ~ ., data = df_train)
dt_1 %>%
extract_fit_engine() %>%
rpart.plot::rpart.plot(roundint = FALSE,
box.palette = c("pink", "dodgerblue"),
extra = 1,
lwd = 2)
dt_1 %>%
extract_fit_engine()
#Let's try a decision tree/random forest!!!
a <- initial_split(df, prop = 0.5)
df_train <- training(a)
df_test <- testing(a)
class_tree_spec <- decision_tree(tree_depth = 30,
mode = "classification",
engine = "rpart")
dt_1 <- class_tree_spec %>%
fit(Obese ~ Age + Education, data = df_train)
dt_1 %>%
extract_fit_engine() %>%
rpart.plot::rpart.plot(roundint = FALSE,
box.palette = c("pink", "dodgerblue"),
extra = 1,
lwd = 2)
dt_1 %>%
extract_fit_engine() %>%
rpart.plot::rpart.plot()
#Let's try a decision tree/random forest!!!
df_split <- initial_split(df, prop = 0.5)
df_train <- training(df_split)
df_test <- testing(df_split)
class_tree_spec <- decision_tree(tree_depth = 30,
mode = "classification",
engine = "rpart")
dt_1 <- class_tree_spec %>%
fit(Obese ~ Age + Education, data = df_train)
dt_1 %>%
extract_fit_engine() %>%
rpart.plot::rpart.plot()
dt_1 %>%
extract_fit_engine() %>%
rpart.plot::rpart.plot(roundint = FALSE)
glimpse(df)
?class_tree_spec
??class_tree_spec
?decision_tree
class_tree_spec <- decision_tree(tree_depth = 30,
mode = "classification",
engine = "rpart") #Set engine, tree type
df2_tree_fit <- class_tree_spec %>%
fit(Obese ~ ., data = df_train) #Fit decision tree
df2_tree_fit %>%
extract_fit_engine() %>%
rpart.plot::rpart.plot(roundint = FALSE,
extra = 1,
box.palette = c("lightblue2", "orange"),
lwd = 2)
#Criterion based
library(leaps)
modLsrev <- regsubsets(priceL ~ . , data = DiamondsL)
read.csv("diamonds_groupP.csv")
library(leaps)
models <- regsubsets(Obese ~ . , data = df)
summary(models)
plot(models, scale = "adjr2")
plot(models, scale = "bic")
plot(models, scale = "Cp")
plot(models, scale = "aic")
plot(models, scale = "AIC")
plot(models, scale = "bic")
plot(models, scale = "adjr2")
plot(models, scale = "Cp")
plot(models, scale = "bic")
plot(models, scale = "adjr2")
plot(models, scale = "Cp")
ggplot(df, aes(x = Age, y = Obese)) +
geom_boxplot()
ggplot(df, aes(x = log(Age), y = Obese)) +
geom_boxplot()
ggplot(df, aes(x = (Age)^2, y = Obese)) +
geom_boxplot()
ggplot(df, aes(x = (Age), y = Obese)) +
geom_boxplot()
ggplot(df, aes(x = Age)) +
geom_histogram() +
facet_wrap(~Obese)
ggplot(df, aes(x = Age)) +
geom_density() +
facet_wrap(~Obese)
?density
ggplot(df, aes(x = Age, group = Obese)) +
geom_density() +
facet_wrap(~Obese)
ggplot(df, aes(x = Age, group = Obese)) +
geom_density()
ggplot(df, aes(x = Age, fill = Obese)) +
geom_density()
ggplot(df, aes(x = Age, fill = Obese)) +
geom_density(aes(alpha = 0.5))
ggplot(df, aes(x = Age, fill = Obese)) +
geom_density(aes(alpha = 0.5)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
ggplot(df, aes(x = Age, fill = Obese)) +
geom_density(aes(alpha = 0.3)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
ggplot(df, aes(x = Age, fill = Obese)) +
geom_density(aes(alpha = 0.1)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
ggplot(df, aes(x = Age, fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_density(aes(alpha = 0.1))
ggplot(df, aes(x = log(Age), fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_density(aes(alpha = 0.1))
ggplot(df, aes(x = (Age)^2, fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_density(aes(alpha = 0.1))
ggplot(df, aes(x = exp(Age), fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_density(aes(alpha = 0.1))
ggplot(df, aes(x = log(Age), fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_density(aes(alpha = 0.1))
ggplot(df, aes(x = (Age), fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_density(aes(alpha = 0.1))
ggplot(df, aes(x = (Age), fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_density(aes(alpha = 0.9))
ggplot(df, aes(x = (Age), fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_density(aes(alpha = 0.1))
ggplot(df, aes(x = (Age), fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"), alpha = 0.1) +
geom_density(aes(alpha = 0.1))
ggplot(df, aes(x = (Age), fill = Obese, alpha = 0.1)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"),) +
geom_density()
ggplot(df, aes(x = (Age), fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"),) +
geom_density()
ggplot(df, aes(x = (Age), fill = Obese, alpha = 0.05)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"),) +
geom_density()
ggplot(df, aes(x = (Age), fill = Obese, alpha = 0.00005)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"),) +
geom_density()
ggplot(df, aes(x = (Age), fill = Obese, alpha = 0.1)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"),) +
geom_density()
ggplot(df, aes(y = (Age), x = Obese)) +
geom_boxplot()
ggplot(df, aes(y = (Age), x = Obese, fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_boxplot()
ggplot(df, aes(x = (Age), fill = Obese, alpha = 0.1)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_density()
ggplot(df, aes(x = abs(Age - mean(Age)), fill = Obese, alpha = 0.1)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_density()
ggplot(df, aes(x = (Age - mean(Age)), fill = Obese, alpha = 0.1)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_density()
abs
ggplot(df, aes(x = abs(Age - mean(Age)), fill = Obese, alpha = 0.1)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_density()
ggplot(df, aes(y = (Age), x = Obese, fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_boxplot()
ggplot(df, aes(x = (Age), fill = Obese, alpha = 0.1)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_density()
ggplot(df, aes(y = (Age), x = Obese, fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_boxplot()
?plot
?boxplot
boxplot(df[,7] ~ df[,2])
boxplot(df[,7] ~ df[,1])
boxplot(df[,7] ~ df[,3])
view(df)
boxplot(df[,7] ~ df[,1])
boxplot(df$Obese ~ df[,1])
print(col)
for (col in colnames(df)) {
print(col)
}
print(df$col)
print(df$"col")
for (col in colnames(df)) {
print(df$"col")
}
print(parse(col))
for (col in colnames(df)) {
print(parse(col))
}
boxplot(df$Obese ~ df$Age)
boxplot(df$Age ~ df$Obese)
getBoxplots <- function(df) {
n <- ncol(df) - 1
par(mfrow = c(1, n))
for (i in 1:n) {
boxplot(df[,i] ~ df$Obese)
}
}
getBoxplots(df)
ggplot(df, aes(x = Age)) +
geom_histogram(bins = 30, col = "white")
ggplot(df, aes(x = Age, y = Obese, fill = Obese)) +
geom_boxplot() +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
ggplot(df, aes(x = Education, group = Obese)) +
geom_bar(aes(y = after_stat(prop),
fill = Obese),
stat = "count",
position = "dodge") +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
ggplot(df, aes(x = Education, group = Obese)) +
geom_bar(aes(y = after_stat(prop),
fill = Obese),
stat = "count",
position = "dodge") +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
ggplot(df, aes(x = fct_infreq(Education),
y = Obese,
fill = Education)) +
geom_bar(stat = "identity") +
facet_wrap(~ Sex)
ggplot(df, aes(x = fct_infreq(Education),
y = Obese,
fill = Education)) +
geom_bar(stat = "identity") +
facet_wrap(~ Veg)
ggplot(df, aes(x = Sex, group = Obese)) +
geom_bar(aes(y = after_stat(prop),
fill = Obese),
stat = "count",
position = "dodge") +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
ggplot(df, aes(x = Education, group = Obese)) +
geom_bar(aes(y = after_stat(prop),
fill = Obese),
stat = "count",
position = "dodge") +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
ggplot(df, aes(y = (Age), x = Obese, fill = Obese)) +
scale_fill_manual(values = c("dodgerblue4", "firebrick3")) +
geom_boxplot()
#Bargraph of obesity by gender (not helpful)
ggplot(df, aes(x = Sex, group = Obese)) +
geom_bar(aes(y = after_stat(prop),
fill = Obese),
stat = "count",
position = "dodge") +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
ggplot(df, aes(x = fct_infreq(Education),
y = Obese,
fill = Education)) +
geom_bar(stat = "identity") +
facet_wrap(~ Veg)
ggplot(df, aes(x = fct_infreq(Education),
y = Obese,
fill = Education)) +
geom_bar(stat = "identity")
ggplot(df, aes(x = fct_infreq(Education),
y = Obese,
fill = Education)) +
geom_bar(stat = "identity") +
facet_wrap(~ Gender)
ggplot(df, aes(x = fct_infreq(Education),
y = Obese,
fill = Education)) +
geom_bar(stat = "identity") +
facet_wrap(~ Sex)
ggplot(df, aes(x = (Veg),
y = Obese,
fill = Veg)) +
geom_bar(stat = "identity")
ggplot(df, aes(x = Veg, group = Obese)) +
geom_bar(aes(y = after_stat(prop),
fill = Obese),
stat = "count",
position = "dodge") +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
ggplot(df, aes(x = Fruit, group = Obese)) +
geom_bar(aes(y = after_stat(prop),
fill = Obese),
stat = "count",
position = "dodge") +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
ggplot(df, aes(x = Veg, group = Obese)) +
geom_bar(aes(y = after_stat(prop),
fill = Obese),
stat = "count",
position = "dodge") +
scale_fill_manual(values = c("dodgerblue4", "firebrick3"))
glimpse(df)
n <- df %>%
by(., .$Year, nrow) %>%
c()
n.Obese.Year <- df %>%
filter(df$Obese == "Yes") %>%
by(., .$Year, nrow) %>%
c()
n.Obese.Year / n
model_Full <- glm(Obese ~ ., family = binomial, data = df)
model_Null <- glm(Obese ~ ., family = binomial, data = df)
summary(model_Full)
anova(model_Full, test = "Chisq")
full.forward = step(model_Null,
scope = list(lower = formula(model_Null),
upper = formula(model_Full)),
direction = "forward")
?step
full.forward = step(model_Null,
scope = model_Full,
direction = "forward")
full.forward = step(model_Null,
scope = formula(model_Full),
direction = "forward")
formula(model_Full)
full.forward = step(model_Full)
rlang::last_trace()
model_Full <- glm(Obese ~ ., family = binomial, data = df)
model_Null <- glm(Obese ~ 1, family = binomial, data = df)
full.forward = step(model_Null,
scope = list(lower = formula(model_Null),
upper = formula(model_Full)),
direction = "forward")
model_Full = glm(Obese ~ ., family = binomial, data = df)
model_Null = glm(Obese ~ 1, family = binomial, data = df)
full.forward = step(model_Null,
scope = list(lower = formula(model_Null),
upper = formula(model_Full)),
direction = "forward")
df2 <- df %>%
mutate(Obese = ifelse(Obese == "Yes", 1, 0))
df2
df
full = glm(Obese~., family = "binomial", data = df2)
nothing = glm(Obese~1, data = df2, family = "binomial")
full.forward = step(nothing,
scope = list(lower = formula(nothing),
upper = formula(full)),
direction = "forward")
full.forward = step(nothing,
scope = list(lower = formula(nothing),
upper = formula(full)),
direction = "both")
stepAIC(nothing,
scope = full,
direction = "both")
MASS::stepAIC(nothing,
scope = full,
direction = "both")
MASS::stepAIC(nothing,
scope = list(lower = formula(nothing),
upper = formula(full)),
direction = "both")
MASS::stepAIC(nothing,
scope = formula(full),
direction = "both")
forward = MASS::stepAIC(full.forward,
scope = list(lower = formula(full.forward),
upper = formula(full)),
direction = "forward")
full.forward <- MASS::stepAIC(nothing,
scope = formula(full),
direction = "both")
forward = MASS::stepAIC(full.forward,
scope = list(lower = formula(full.forward),
upper = formula(full)),
direction = "forward")
forward
full.forward <- MASS::stepAIC(model_Null,
scope = formula(model_Full),
direction = "both")
MASS::stepAIC(model_Null,
scope = formula(model_Full),
direction = "both")
plot(models, scale = "Cp") #says not to include sex, fruit or year
par(mfrow = c(1,1))
plot(models, scale = "Cp") #says not to include sex, fruit or year
plot(models, scale = "bic")
plot(models, scale = "adjr2")
model_1 <- glm(Obese ~ Age + Education + Veg,
family = binomial, data = df)
model_1 <- glm(Obese ~ Age + Education + Veg,
family = binomial,
data = df)
model_1 %>%
tidy(conf.int = T)
model_1 <- glm(Obese ~ Age + Education + Veg,
family = binomial,
data = df)
model_1 %>%
tidy(conf.int = T)
library(sjPlot)
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(gt)
library(MASS)
library(patchwork)
library(moderndive)
#library(sjPlot)
View(evals)
evals.ethnic <- evals %>%
select(gender, ethnicity)
evals.scores <- evals %>%
select(score, bty_avg)
#library(sjPlot)
evals.ethnic <- evals |>
select(gender, ethnicity)
library(dplyr)
#library(sjPlot)
evals.ethnic <- evals |>
select(gender, ethnicity)
#library(sjPlot)
evals.ethnic <- evals %>%
select(gender, ethnicity)
evals.ethnic <- evals %>%
dplyr::select(gender, ethnicity)
model.ethnic <- glm(gender ~ ethnicity,
data = evals.ethnic,
family = binomial)

